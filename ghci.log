GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/kyoka/bprog2022/.ghci
2022-05-19 15:41:30.876068519
>>> 3+2*5
13
2022-05-19 15:55:22.20963766
>>> 5-4-8
-7
2022-05-19 15:55:44.030657881
>>> sqrt 2
1.4142135623730951
2022-05-19 16:00:03.073534509
>>> double 3

<interactive>:4:1: error: Variable not in scope: double :: t0 -> t
2022-05-19 16:03:16.668234863
>>> GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/kyoka/bprog2022/.ghci
2022-05-26 15:02:26.132969517
>>> maxBound::Int
9223372036854775807
2022-05-26 15:03:36.519281535
>>> 2 ^63-1
9223372036854775807
2022-05-26 15:05:01.477596339
>>> minBound::Int
-9223372036854775808
2022-05-26 15:05:37.745247074
>>> :e src/First.hs
   1  module First where
   2  
   3      double :: Int -> Int
   4      double x = x + x
Ok, no modules loaded.
2022-05-26 15:49:02.472478609
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-05-26 15:49:02.508406489
>>> double3

<interactive>:6:1: error:
    • Variable not in scope: double3
    • Perhaps you meant ‘double’ (line 4)
2022-05-26 15:56:22.960494031
>>> double 3
6
2022-05-26 15:57:06.138226
>>> :q
Leaving GHCi.
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/kyoka/bprog2022/.ghci
2022-06-09 14:55:52.603655666
>>> 2+3*4
14
2022-06-09 14:58:46.210791379
>>> (2+3)*4
20
2022-06-09 15:00:16.470166101
>>> :i sqrt
type Floating :: * -> Constraint
class Fractional a => Floating a where
  ...
  sqrt :: a -> a
  ...
  	-- Defined in ‘GHC.Float’
2022-06-09 15:00:55.766036329
>>> sqrt (3^2+4^2)
5.0
2022-06-09 15:05:21.870625556
>>> sqrt (25::int)

<interactive>:5:7: error:
    • Could not deduce (Num int) arising from the literal ‘25’
      from the context: Floating a
        bound by the inferred type of it :: Floating a => a
        at <interactive>:5:1-14
      Possible fix:
        add (Num int) to the context of
          an expression type signature:
            forall int. int
    • In the first argument of ‘sqrt’, namely ‘(25 :: int)’
      In the expression: sqrt (25 :: int)
      In an equation for ‘it’: it = sqrt (25 :: int)
2022-06-09 15:08:19.499199335
>>> sqrt (25::Double)
5.0
2022-06-09 15:11:22.023265153
>>> hoge=[3,1,4,1,5]::[Int]
2022-06-09 15:51:07.09041701
>>> hoge
[3,1,4,1,5]
2022-06-09 15:51:14.488376421
>>> head hoge
3
2022-06-09 15:51:39.779719549
>>> tail hoge
[1,4,1,5]
2022-06-09 15:51:58.516904148
>>> hoge !!0
3
2022-06-09 15:55:19.070572183
>>> hoge 2 !! hoge

<interactive>:12:1: error:
    • Couldn't match expected type: t0 -> [a]
                  with actual type: [Int]
    • The function ‘hoge’ is applied to one value argument,
        but its type ‘[Int]’ has none
      In the first argument of ‘(!!)’, namely ‘hoge 2’
      In the expression: hoge 2 !! hoge
    • Relevant bindings include it :: a (bound at <interactive>:12:1)

<interactive>:12:11: error:
    • Couldn't match expected type ‘Int’ with actual type ‘[Int]’
    • In the second argument of ‘(!!)’, namely ‘hoge’
      In the expression: hoge 2 !! hoge
      In an equation for ‘it’: it = hoge 2 !! hoge
2022-06-09 15:57:00.620197446
>>> hoge 2 !!

<interactive>:13:10: error:
    parse error (possibly incorrect indentation or mismatched brackets)
2022-06-09 15:57:18.055170867
>>> hoge !! 2
4
2022-06-09 15:57:56.230413245
>>> take 3hoge
[3,1,4]
2022-06-09 15:58:12.030386722
>>> take 10 hoge
[3,1,4,1,5]
2022-06-09 16:00:20.834367583
>>> drop 10 hoge
[]
2022-06-09 16:00:41.195323857
>>> length haed

<interactive>:18:8: error:
    • Variable not in scope: haed :: t0 a0
    • Perhaps you meant ‘head’ (imported from Prelude)
2022-06-09 16:01:17.890607536
>>> length hoge
5
2022-06-09 16:01:56.932048025
>>> length []
0
2022-06-09 16:02:12.266264453
>>> sum hoge
14
2022-06-09 16:02:24.531969066
>>> product hoge
60
2022-06-09 16:03:42.464630663
>>> hoge ++ hoge
[3,1,4,1,5,3,1,4,1,5]
2022-06-09 16:04:57.619499679
>>> reverse hoge
[5,1,4,1,3]
2022-06-09 16:05:56.303226773
>>> :e scr/First.ht
catn: scr/First.ht: openFile: does not exist (No such file or directory)
2022-06-09 16:08:18.934862115
>>> :load scr/First.ht
target ‘scr/First.ht’ is not a module name or a source file
2022-06-09 16:08:18.961697311
>>> :e src/First.ht
catn: src/First.ht: openFile: does not exist (No such file or directory)
2022-06-09 16:09:47.616715362
>>> :load src/First.ht
target ‘src/First.ht’ is not a module name or a source file
2022-06-09 16:09:47.71442495
>>> :e src/First.hs
   1  module First where
   2  
   3      double :: Int -> Int
   4      double x = x + x
Ok, no modules loaded.
2022-06-09 16:11:04.643202453
>>> :load src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-09 16:11:04.69381035
>>> [1of1] Compiling First

<interactive>:31:3: error: Variable not in scope: of1

<interactive>:31:8: error: Data constructor not in scope: Compiling

<interactive>:31:18: error: Data constructor not in scope: First
2022-06-09 16:12:06.264102598
>>> GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/kyoka/bprog2022/.ghci
2022-06-16 15:02:32.385541347
>>> tate 3 [3,1,4,1,5]

<interactive>:1:1: error:
    • Variable not in scope: tate :: t0 -> [a0] -> t
    • Perhaps you meant ‘take’ (imported from Prelude)
2022-06-16 15:08:34.108572348
>>> take3[3,1,4,1,5]

<interactive>:2:1: error:
    • Variable not in scope: take3 :: [a0] -> t
    • Perhaps you meant ‘take’ (imported from Prelude)
2022-06-16 15:09:06.831377574
>>> take 3[3,1,4,1,5]
[3,1,4]
2022-06-16 15:10:07.199583772
>>> :e src/First.hs
   1  module First where
   2  
   3      double :: Int -> Int
   4      double x = x + x
   5  
   6      quadruple:: Int -> Int
   7      quadruple x = double (double x)
Ok, no modules loaded.
2022-06-16 15:10:50.366805771
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 15:10:50.40339348
>>> double

<interactive>:6:1: error:
    • No instance for (Show (Int -> Int)) arising from a use of ‘print’
        (maybe you haven't applied a function to enough arguments?)
    • In a stmt of an interactive GHCi command: print it
2022-06-16 15:12:55.8917146
>>> take (double 2)[1,2,3,4,5]
[1,2,3,4]
2022-06-16 15:16:28.625489721
>>> [1..10]
[1,2,3,4,5,6,7,8,9,10]
2022-06-16 15:20:51.595094646
>>> :e
   1  module First where
   2  
   3      double :: Int -> Int
   4      double x = x + x
   5  
   6      quadruple:: Int -> Int
   7      quadruple x = double (double x)
   8  
   9      factorial :: Integer -> Integer
  10      factorial n = product[1..n]
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 15:21:00.878527416
>>> factorial 3
6
2022-06-16 15:22:06.64348316
>>> :e
   1  module First where
   2  
   3      double :: Int -> Int
   4      double x = x + x
   5  
   6      quadruple:: Int -> Int
   7      quadruple x = double (double x)
   8  
   9      factorial :: Integer -> Integer
  10      factorial n = product[1..n]
  11  
  12      average :: [Int] -> Int 
  13      average xs = sum xs`div`length xs
  14  
  15      ave :: [Int] -> Int
  16      ave xs = div(sum xs)(length xs)
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 15:38:12.188316426
>>> average [1,2,3,4,5]
3
2022-06-16 15:38:42.932806402
>>> :t take 3[1,2,3,4,5]
take 3[1,2,3,4,5] :: Num a => [a]
2022-06-16 15:50:00.418019175
>>> init [1..5]
[1,2,3,4]
2022-06-16 16:07:21.029597578
>>> :q
Leaving GHCi.
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/kyoka/bprog2022/.ghci
2022-06-23 14:56:12.293699142
>>> :i
syntax: ':i <thing-you-want-info-about>'
2022-06-23 14:56:19.042905083
>>> :i Num
type Num :: * -> Constraint
class Num a where
  (+) :: a -> a -> a
  (-) :: a -> a -> a
  (*) :: a -> a -> a
  negate :: a -> a
  abs :: a -> a
  signum :: a -> a
  fromInteger :: Integer -> a
  {-# MINIMAL (+), (*), abs, signum, fromInteger, (negate | (-)) #-}
  	-- Defined in ‘GHC.Num’
instance Num NominalDiffTime
  -- Defined in ‘time-1.9.3:Data.Time.Clock.Internal.NominalDiffTime’
instance Num DiffTime
  -- Defined in ‘time-1.9.3:Data.Time.Clock.Internal.DiffTime’
instance Num Word -- Defined in ‘GHC.Num’
instance Num Integer -- Defined in ‘GHC.Num’
instance Num Int -- Defined in ‘GHC.Num’
instance Num Float -- Defined in ‘GHC.Float’
instance Num Double -- Defined in ‘GHC.Float’
2022-06-23 14:56:37.025679315
>>> 1==2
False
2022-06-23 15:06:31.039169146
>>> 1<2
True
2022-06-23 15:06:43.709065519
>>> 'a' <'b'
True
2022-06-23 15:11:28.239328534
>>> 'a'<'B'
False
2022-06-23 15:11:48.144576152
>>> 1/=1
False
2022-06-23 15:16:17.595099616
>>> :info abs
type Num :: * -> Constraint
class Num a where
  ...
  abs :: a -> a
  ...
  	-- Defined in ‘GHC.Num’
2022-06-23 15:30:40.612310504
>>> abs

<interactive>:9:1: error:
    • No instance for (Show (Integer -> Integer))
        arising from a use of ‘print’
        (maybe you haven't applied a function to enough arguments?)
    • In a stmt of an interactive GHCi command: print it
2022-06-23 15:39:22.786756702
>>> abs(-234)
234
2022-06-23 15:39:41.601332032
>>> GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/kyoka/bprog2022/.ghci
2022-06-30 14:56:33.86446431
>>> GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/kyoka/bprog2022/.ghci
2022-06-30 15:01:11.368080097
>>> GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/kyoka/bprog2022/.ghci
2022-06-30 15:01:42.125406638
>>> [x^2|x<-[1..5]]
[1,4,9,16,25]
2022-06-30 15:02:21.588272243
>>> map (^2)[1..5]
[1,4,9,16,25]
2022-06-30 15:05:12.634131131
>>> [x * 2 | x <- [1..5] ]
[2,4,6,8,10]
2022-06-30 15:12:06.686800357
>>> [ x `div` 2 | x <- [1..5]]
[0,1,1,2,2]
2022-06-30 15:13:46.12517372
>>> [ x `divMod` 2 | x <- [1..5]]
[(0,1),(1,0),(1,1),(2,0),(2,1)]
2022-06-30 15:15:36.902773461
>>> [(x , y) | x <- "a,b,c", y <- [4,5]]
[('a',4),('a',5),(',',4),(',',5),('b',4),('b',5),(',',4),(',',5),('c',4),('c',5)]
2022-06-30 15:21:00.387735212
>>> :e src/First.hs
   1  module First where
   2  
   3      double :: Int -> Int
   4      double x = x + x
   5  
   6      quadruple:: Int -> Int
   7      quadruple x = double (double x)
   8  
   9      factorial :: Integer -> Integer
  10      factorial n = product[1..n]
  11  
  12      average :: [Int] -> Int 
  13      average xs = sum xs`div`length xs
  14  
  15      ave :: [Int] -> Int
  16      ave xs = div(sum xs)(length xs)
  17  
  18      myinit ::[a] -> [a]
  19      myinit (x:[]) = []
  20      myinit (x:xs) = x : (init xs)
  21  
  22      myconcat :: [[a]] -> [a]
  23      myconcat xss = [ x | xs <- xss,x <- xs]
Ok, no modules loaded.
2022-06-30 15:29:54.234763179
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-30 15:29:54.265340871
>>> myconcat [[1,2,3],[4,5],[6,7,8,9]]
[1,2,3,4,5,6,7,8,9]
2022-06-30 15:35:28.382215507
>>> [ 1 | _ <- [1..5] ]
[1,1,1,1,1]
2022-06-30 15:48:00.06254719
>>> :e src/First.hs
   1  module First where
   2  
   3      double :: Int -> Int
   4      double x = x + x
   5  
   6      quadruple:: Int -> Int
   7      quadruple x = double (double x)
   8  
   9      factorial :: Integer -> Integer
  10      factorial n = product[1..n]
  11  
  12      average :: [Int] -> Int 
  13      average xs = sum xs`div`length xs
  14  
  15      ave :: [Int] -> Int
  16      ave xs = div(sum xs)(length xs)
  17  
  18      myinit ::[a] -> [a]
  19      myinit (x:[]) = []
  20      myinit (x:xs) = x : (init xs)
  21  
  22      myconcat :: [[a]] -> [a]
  23      myconcat xss = [ x | xs <- xss,x <- xs]
  24  
  25      mylength :: [a] -> Int
  26      mylenght xs =sum [ 1 | _<- xs]
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:25:5: error:
    The type signature for ‘mylength’ lacks an accompanying binding
      Perhaps you meant ‘mylenght’ (Defined at src/First.hs:26:5)
   |
25 |     mylength :: [a] -> Int
   |     ^^^^^^^^
Failed, no modules loaded.
2022-06-30 15:50:42.37509368
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:25:5: error:
    The type signature for ‘mylength’ lacks an accompanying binding
      Perhaps you meant ‘mylenght’ (Defined at src/First.hs:26:5)
   |
25 |     mylength :: [a] -> Int
   |     ^^^^^^^^
Failed, no modules loaded.
2022-06-30 15:50:42.471915265
>>> :e
   1  module First where
   2  
   3      double :: Int -> Int
   4      double x = x + x
   5  
   6      quadruple:: Int -> Int
   7      quadruple x = double (double x)
   8  
   9      factorial :: Integer -> Integer
  10      factorial n = product[1..n]
  11  
  12      average :: [Int] -> Int 
  13      average xs = sum xs`div`length xs
  14  
  15      ave :: [Int] -> Int
  16      ave xs = div(sum xs)(length xs)
  17  
  18      myinit ::[a] -> [a]
  19      myinit (x:[]) = []
  20      myinit (x:xs) = x : (init xs)
  21  
  22      myconcat :: [[a]] -> [a]
  23      myconcat xss = [ x | xs <- xss,x <- xs]
  24  
  25      mylength :: [a] -> Int
  26      mylenght xs =sum [ 1 | _<- xs]
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:25:5: error:
    The type signature for ‘mylength’ lacks an accompanying binding
      Perhaps you meant ‘mylenght’ (Defined at src/First.hs:26:5)
   |
25 |     mylength :: [a] -> Int
   |     ^^^^^^^^
Failed, no modules loaded.
2022-06-30 15:52:38.987286992
>>> :e src/First.hs
   1  module First where
   2  
   3      double :: Int -> Int
   4      double x = x + x
   5  
   6      quadruple:: Int -> Int
   7      quadruple x = double (double x)
   8  
   9      factorial :: Integer -> Integer
  10      factorial n = product[1..n]
  11  
  12      average :: [Int] -> Int 
  13      average xs = sum xs`div`length xs
  14  
  15      ave :: [Int] -> Int
  16      ave xs = div(sum xs)(length xs)
  17  
  18      myinit ::[a] -> [a]
  19      myinit (x:[]) = []
  20      myinit (x:xs) = x : (init xs)
  21  
  22      myconcat :: [[a]] -> [a]
  23      myconcat xss = [ x | xs <- xss,x <- xs]
  24  
  25      mylength :: [a] -> Int
  26      mylength xs =sum [ 1 | _<- xs]
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-30 15:55:02.971283524
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-30 15:55:03.069298058
>>> ['a' .. 'z']
"abcdefghijklmnopqrstuvwxyz"
2022-06-30 15:56:15.545111943
>>> putStrLn

<interactive>:17:1: error:
    • No instance for (Show (String -> IO ()))
        arising from a use of ‘print’
        (maybe you haven't applied a function to enough arguments?)
    • In a stmt of an interactive GHCi command: print it
2022-06-30 15:57:06.383542947
>>> putStrLn it
abcdefghijklmnopqrstuvwxyz
2022-06-30 15:57:47.740627263
>>> putStrLn it

<interactive>:19:10: error:
    • Couldn't match type ‘()’ with ‘[Char]’
      Expected: String
        Actual: ()
    • In the first argument of ‘putStrLn’, namely ‘it’
      In the expression: putStrLn it
      In an equation for ‘it’: it = putStrLn it
2022-06-30 15:58:25.046670473
>>> ['あ'..'ん']
"\12354\12355\12356\12357\12358\12359\12360\12361\12362\12363\12364\12365\12366\12367\12368\12369\12370\12371\12372\12373\12374\12375\12376\12377\12378\12379\12380\12381\12382\12383\12384\12385\12386\12387\12388\12389\12390\12391\12392\12393\12394\12395\12396\12397\12398\12399\12400\12401\12402\12403\12404\12405\12406\12407\12408\12409\12410\12411\12412\12413\12414\12415\12416\12417\12418\12419\12420\12421\12422\12423\12424\12425\12426\12427\12428\12429\12430\12431\12432\12433\12434\12435"
2022-06-30 16:00:07.267173142
>>> putStrLn it
あぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをん
2022-06-30 16:00:16.560315843
>>> :q
Leaving GHCi.
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/kyoka/bprog2022/.ghci
2022-07-07 16:05:10.571506638
>>> :e src/Caesar.hs
   1  module Ceasar where
   2  
   3      import Data.Char
Ok, no modules loaded.
2022-07-07 16:05:40.708191653
>>> :l src/Caesar.hs
[1 of 1] Compiling Ceasar           ( src/Caesar.hs, interpreted )
Ok, one module loaded.
2022-07-07 16:05:40.790301379
>>> ord 'A'
65
2022-07-07 16:06:13.344579674
>>> ord 'a'
97
2022-07-07 16:07:03.637676841
>>> :q
Leaving GHCi.
